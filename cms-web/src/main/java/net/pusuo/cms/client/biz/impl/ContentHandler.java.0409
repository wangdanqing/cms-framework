/**
 * 
 */
package com.hexun.cms.client.biz.impl;

import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.hexun.cms.Global;
import com.hexun.cms.client.ItemManager;
import com.hexun.cms.client.auth.Authentication;
import com.hexun.cms.client.auth.exception.UnauthenticatedException;
import com.hexun.cms.client.biz.Handler;
import com.hexun.cms.client.biz.ManagerFacade;
import com.hexun.cms.client.biz.NewsManager;
import com.hexun.cms.client.biz.PictureManager;
import com.hexun.cms.client.biz.exception.DaoException;
import com.hexun.cms.client.biz.exception.ParentNameException;
import com.hexun.cms.client.biz.exception.PropertyException;
import com.hexun.cms.client.util.EntityParamUtil;
import com.hexun.cms.client.util.ItemUtil;
import com.hexun.cms.client.util.Relatives;
import com.hexun.cms.client.util.SogouRelatives;
import com.hexun.cms.client.util.StockUtil;
import com.hexun.cms.core.News;
import com.hexun.cms.util.Util;

/**
 * @author Alfred.Yuan
 *
 */
public class ContentHandler implements Handler {
	
	private static final Log log = LogFactory.getLog(ContentHandler.class);
	
//	private static final int TEMPLATE_ID_THIRD = 54536;
	
	public News preHandle(News newsConfig, Map extend) throws PropertyException,
			ParentNameException, UnauthenticatedException, DaoException {
		
		// 是否是跳转新闻
		boolean isRedirectNews = false;
		String reurl = newsConfig.getReurl();
		if (reurl != null && reurl.trim().length() > 0)
			isRedirectNews = true;
		
		if (isRedirectNews)
			return newsConfig;
		
		// 内容合法性检查
		// ......
		
		// 子类型检查
//		int subtype = newsConfig.getSubtype();
//		if (subtype == News.SUBTYPE_DEFAULT || 
//				subtype == News.SUBTYPE_TEXT || 
//				subtype == News.SUBTYPE_PICTURE) {
//			boolean hasPicture = false;
//			
//			String text = newsConfig.getText();
//			String picturesParam = newsConfig.getPictures();
//			if (text != null && text.trim().length() > 0 &&
//					picturesParam != null && picturesParam.trim().length() > 0) {
//				String[] pictures = picturesParam.split(Global.CMSSEP);
//				for (int i = 0; i < pictures.length; i++) {
//					String picture = pictures[i];
//					if (picture == null || picture.trim().length() == 0)
//						continue;
//					if (text.indexOf(picture) > -1) {
//						hasPicture = true;
//						break;
//					}
//				}
//			}
//			
//			if (hasPicture)
//				newsConfig.setSubtype(News.SUBTYPE_PICTURE);
//			else
//				newsConfig.setSubtype(News.SUBTYPE_TEXT);
//		}
		
		// 代码整理:财经新闻
		if (extend.containsKey(NewsManager.PROPERTY_NAME_AUTH)) {
			Authentication auth = (Authentication)extend.get(NewsManager.PROPERTY_NAME_AUTH);
			if (auth.hasChannel(EntityParamUtil.CHANNEL_NAME_BUSINESS)) {
				if (newsConfig.getChannel() == EntityParamUtil.CHANNEL_ID_BUSINESS &&
						extend.containsKey(NewsManager.PROPERTY_NAME_CANONICAL)) {
					boolean needCanonical = ((Boolean)extend
							.get(NewsManager.PROPERTY_NAME_CANONICAL)).booleanValue();
					if (needCanonical) {
						String content = newsConfig.getText();
						content = Util.GB2312ToUnicode(content);
						String canonicalContent = StockUtil.canonicalizeContent(content);
						canonicalContent = Util.unicodeToGB2312(canonicalContent);
						newsConfig.setText(canonicalContent);
					}
				}
			}
		}
		
		// 兼容其他的"新闻模板"
		//if (newsConfig.getTemplate().indexOf(String.valueOf(TEMPLATE_ID_THIRD)) == -1) {
			// 处理关键字
		if(newsConfig.getId()<0){
			String keyword = newsConfig.getKeyword();
			// 处理相关新闻(只针对新发新闻)
			keyword = newsConfig.getKeyword();
			if (keyword != null && keyword.trim().length() > 0) { // dirty
				String relativeNews = ItemUtil.searchRelativeNews(keyword, newsConfig.getChannel(), 5);
				if (relativeNews != null) {
					newsConfig.setRelativenews(relativeNews.trim());
				}
			}
		}
		return newsConfig;
	}

	public News postHandle(News news, Map extend) throws PropertyException,
			ParentNameException, UnauthenticatedException, DaoException {
		
		// 是否是跳转新闻
		boolean isRedirectNews = false;
		String reurl = news.getReurl();
		if (reurl != null && reurl.trim().length() > 0)
			isRedirectNews = true;

		// 处理内容中的图片(自动上传外部图片)
		PictureManager pictureManager = ManagerFacade.getPictureManager();
		String contentAfterHandle = pictureManager.handleExternalPicturesFromContent(
				news.getText(), news.getId(), extend);
		if (contentAfterHandle != null && contentAfterHandle.trim().length() > 0) {
			news.setText(contentAfterHandle);
			news = (News)ItemManager.getInstance().update(news);
		}
		
		if (isRedirectNews)
			return news;
		
		// 处理相关碎片(只针对新发新闻)
//		boolean isSaveAction = true;
//		if (extend != null && extend.containsKey(NewsManager.PROPERTY_NAME_IS_SAVE_ACTION)) {
//			isSaveAction = ((Boolean)extend.get(NewsManager.PROPERTY_NAME_IS_SAVE_ACTION)).booleanValue();
//		}
//		if (isSaveAction)
//			handleRelatives(news);
		
		return news;
	}
	
	private void handleRelatives(News news) {
		
		try {
			Relatives relatives = SogouRelatives.getSogouRelatives(news, 
					SogouRelatives.NEWS_COUNT, 
					SogouRelatives.HINT_COUNT, 
					SogouRelatives.BLOG_COUNT, 
					SogouRelatives.SAYBAR_COUNT);
			
			if (relatives != null) {
				// 关键字
				String keyword = news.getKeyword();
				if (keyword == null || keyword.trim().length() == 0) {
					String content = SogouRelatives.getKeywordContent(relatives);
					if (content != null && content.trim().length() > 0) {
						news.setKeyword(content);
						ItemManager.getInstance().update(news); // 保存新闻的关键字
					}
				}
				
				// 相关新闻
				String content = SogouRelatives.getRelativeNewsContent(relatives);
				SogouRelatives.writeRelativeNewsContent(news, content);
				
				// 相关搜索(如果没有相关新闻,那么相关搜索也不显示)
				if (content != null && content.trim().length() > 0) {
					content = SogouRelatives.getRelativeHintContent(relatives);
				}
				SogouRelatives.writeRelativeHintContent(news, content);
						
				// 相关博客
				content = SogouRelatives.getRelativeBlogContent(relatives);
				SogouRelatives.writeRelativeBlogContent(news, content);
						
				// 相关说吧
				content = SogouRelatives.getRelativeSaybarContent(relatives);
				SogouRelatives.writeRelativeSaybarContent(news, content);
			}
		}
		catch (Exception e) {
			log.error("ContentHandler: handling relative news/hint/blog/saybar err." + e);
		}		
	}

}
