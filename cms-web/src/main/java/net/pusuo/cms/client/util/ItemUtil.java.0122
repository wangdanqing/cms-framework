package com.hexun.cms.client.util;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Comparator;
import java.util.Collections;
import java.util.StringTokenizer;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.util.LabelValueBean;

import com.hexun.cms.Item;
import com.hexun.cms.ItemInfo;
import com.hexun.cms.client.ItemManager;
import com.hexun.cms.core.Channel;
import com.hexun.cms.core.EntityItem;
import com.hexun.cms.core.News;
import com.hexun.cms.core.Subject;

import com.hexun.cms.auth.Perm;
import com.hexun.cms.auth.Role;

import com.hexun.cms.Global;

public final class ItemUtil {
	private static final Log log = LogFactory.getLog(ItemUtil.class);

	private static Map LVBCache = new HashMap(20);

	public static void setItemValues(DynaActionForm dForm, Item item) {
		try {
			String name = null;
			Object value = null;
			Map map = dForm.getMap();
		
			Iterator keys = map.keySet().iterator();
			while (keys.hasNext()) {
				name = (String) keys.next();
				if (PropertyUtils.isWriteable(item, name)) {
					value = map.get(name);

					if (value instanceof String[]) {
						/* dirty code . modified by Mark 2004.10.18
						 Item collectionItem = (Item)PropertyUtils.getProperty(item,name+"Instance");
						 PropertyUtils.setProperty(item,name,CollectionConverter(value,collectionItem.getClass()));					
					  	*/
						// dirty too , because 1.4 can't load data from java metadata :(
						Item collectionItem = (Item) PropertyUtils.getProperty(item, name + "Instance");
						Collection items = (Collection) PropertyUtils.getProperty(item, name);
						setCollection(items, value, collectionItem.getClass());
					} else {
						PropertyUtils.setProperty(item, name, value);
					}
				}
			}
		} catch (Exception e) {
			log.error("setItemValues error. " + e.toString());
		}
	}

	public static void putItemValues(DynaActionForm dForm, Item item) {
		try {
			String name = null;
			Map map = dForm.getMap();
			Iterator keys = map.keySet().iterator();
			while (keys.hasNext()) {
				name = (String) keys.next();
				if (PropertyUtils.isReadable(item, name)) {
					Object value = PropertyUtils.getProperty(item, name);
					if (value instanceof Collection) {
						dForm.set(name, StringArrayConverter(value));
					}
					/* maybe ...
					 else if ( value instanceof Map )
					 {
					 }
					 */
					else {
						dForm.set(name, value);
					}
				} else {
					// set items list here . eg. "List6" -- GROUP_TYPE
					if (name.startsWith("List")) {
						try {
							int entityType = Integer.parseInt(name.substring(4));
							List list = ItemManager.getInstance().getList(
									ItemInfo.getItemClass(entityType));

							// added by wangzhigang 2005.9.15
							// sort by item.desc
							Collections.sort( list, new DescComparator() );

							if (list != null) {
								List key_value = new ArrayList();
								ListToLVB(list, key_value);
								dForm.set(name, key_value);
							}

							//log.debug("list value: "+list);
						} catch (NumberFormatException nfe) {
							log.error("putItemValues: put list error . " + nfe);
						}
					}
				}
			}
		} catch (Exception e) {
			log.error("putItemValues error. " + e.toString());
		}
	}

	public static List ListToLVB(Collection src, List dst) {
		try {
			Item item = null;
			Iterator i = src.iterator();
			while (i.hasNext()) {
				item = (Item) i.next();
				if (item != null)
					dst.add(new LabelValueBean(item.getDesc(), String.valueOf(item.getId())));
			}
		} catch (Exception e) {
			log.error("ListToMap error . " + e);
		}
		return dst;
	}

	public static List ListToLVB(Collection src) {
	    List dst = new ArrayList();
		try {
			Item item = null;
			Iterator i = src.iterator();
			while (i.hasNext()) {
				item = (Item) i.next();
				if (item != null)
					dst.add(new LabelValueBean(item.getDesc(), String.valueOf(item.getId())));
			}
		} catch (Exception e) {
			log.error("ListToMap error . " + e);
		}
		return dst;
	}

	public static List ListToLVBByName(Collection src) {
	    List dst = new ArrayList();
		try {
			Item item = null;
			Iterator i = src.iterator();
			while (i.hasNext()) {
				item = (Item) i.next();
				if (item != null)
					dst.add(new LabelValueBean(item.getName(), String.valueOf(item.getId())));
			}
		} catch (Exception e) {
			log.error("ListToMap error . " + e);
		}
		return dst;
	}

	public static Object StringArrayConverter(Object value) {
		String[] ret = null;
		if (value instanceof Collection) {
			Collection list = (Collection) value;
			Object[] items = list.toArray();
			ret = new String[items.length];
			for (int i = 0; i < ret.length; i++) {
				ret[i] = String.valueOf(((Item) items[i]).getId());
			}
		}
		return ret;
	}

	public static void setCollection(Collection items, Object value, Class itemClass) {
		
		if ( value instanceof String[]) {
			String[] list = (String[]) value;
			Set newSet = new HashSet();
			Set oldSet = new HashSet();
			Object[] itemlist = items.toArray();
			for (int i = 0; i < list.length; i++) {
				try {
					int itemID = Integer.parseInt(list[i]);
					Object mapItem = null;
					for (int j = 0; j < itemlist.length; j++) {
						if (((Item) itemlist[j]).getId() == itemID) {
							System.out.println("========= old " + itemID);
							mapItem = itemlist[j];
							oldSet.add(mapItem);
						}
					}
					if (mapItem == null) {
						mapItem = ItemManager.getInstance().get(new Integer(itemID), itemClass);
						newSet.add(mapItem);
						System.out.println("========= new " + itemID);
					}
				} catch (Exception e) {
					log.error("setCollection [" + list[i] + "] error . " + e);
					continue;
				}
			}
			items.retainAll(oldSet);
			Iterator it = newSet.iterator();
			while (it.hasNext()) {
				items.add(it.next());
			}
			 

			/*
			 for ( int i=0;i<list.length;i++ )
			 {
			 try
			 {
			 ret.add(ItemManager.getInstance().get(Integer.valueOf(list[i]),itemClass));
			 }
			 catch ( NumberFormatException nfe )
			 {
			 log.error("collection convert number["+list[i]+"] error . "+nfe);
			 continue;
			 }
			 }
			 */
		}
	}

	/**
	 *判断在所属频道下是否存在这个实体
	 */
	public static boolean isPExistChannel(Integer channel, Integer id) {
		boolean ret = false;
		try {
			EntityItem item = (EntityItem) ItemManager.getInstance().get(id, EntityItem.class);
			if (channel.intValue() == item.getChannel()) {
				ret = true;
			}
		} catch (Exception e) {
			log.error("ItemUtil.isPExistChannel error . " + e.toString());
			ret = false;
		}
		return ret;
	}

	public static String getPSubjectID(EntityItem item) {
		String ids = "0000";

		try {
			if (item == null)
				return ids;

			ids = String.valueOf(item.getId());
			while (item != null && item.getId() > 0) {
				if (item.getType() == EntityItem.SUBJECT_TYPE) {//类型为专题                                   
					if (((Subject) item).getSubtype() == 1) {//子类型为专题                                 
						ids = item.getId() + "";
						break;
					}
				}
				item = (EntityItem) ItemManager.getInstance().get(new Integer(item.getPid()),
						EntityItem.class);
			}
			ids = ((ids != null && ids.length() >= 4) ? ids : "0000");
		} catch (Exception e) {
			log.error("ItemUtil.getPSubjectID error. " + e.toString());
		}

		return ids;
	}

	public static List getEntityParents(EntityItem item) {
		int maxloop = 0;
		ArrayList parents = new ArrayList();
		try {
			while (item != null && item.getPid() > 0) {
				item = (EntityItem) ItemManager.getInstance().get(new Integer(item.getPid()),
						EntityItem.class);
				maxloop++;
				if (maxloop > 20)
					break;
				parents.add(item);
			}
		} catch (Exception e) {
			log.error("ItemUtil.getEntityParents error. " + e.toString());
		}
		return parents;
	}

	/*
	 * Return all of parent node and itself node. 
	 * Added by Shijinkui 
	 */
	public static List getEntityParentsAndSelf(EntityItem item) {
		int maxloop = 0;
		List parents = new ArrayList();
		parents = getEntityParents(item);
		parents.add(0,item);		
		return parents;
	}
	public static List getEntityChildren(int pid, int entityType) {
		// never use this api to list news or pics
		if (entityType > 0 && entityType != ItemInfo.SUBJECT_TYPE && entityType != ItemInfo.HOMEPAGE_TYPE) {
			return null;
		}
		String hql = "select item.id from " + ItemInfo.getEntityClass().getName()
				+ " item where item.pid=? and item.type=? order by item.priority desc,item.time asc";
		List ids = null;
		List ret = new ArrayList();
		try {
			Collection values = new ArrayList();
			values.add(new Integer(pid));
			values.add(new Integer(entityType));
			ids = ItemManager.getInstance().getList(hql, values, -1, -1);
			if (ids != null) {
				Iterator itor = ids.iterator();
				while (itor.hasNext()) {
					try {
						ret.add(ItemManager.getInstance().get(((Integer) itor.next()),
								ItemInfo.getEntityClass()));
					} catch (NumberFormatException nfe) {
						log.error("ItemUtil getEntityChildren parse item id error . "
								+ nfe.toString());
						continue;
					}
				}
			}
		} catch (Exception e) {
			log.error("ItemUtil.getEntityChildren error. " + e.toString());
		}
		return ret;
	}

	public static List getEntityChildrenByPriority( int pid, int entityType, int minpriority, int maxpriority )
	{
		List list = getEntityChildren( pid, entityType );
		List ret = new ArrayList();
		for(int i=0; list!=null && i<list.size(); i++)
		{
			EntityItem eItem = (EntityItem)list.get(i);
			int priority = eItem.getPriority();
			if( priority<minpriority || priority>maxpriority ) continue;
			if( eItem.getStatus()!=2 ) continue;
			ret.add( list.get(i) );
		}
		return ret;
	}

	public static List getChannelList(Set set) {

		List channels = new ArrayList();//用户所属频道
		Iterator it = set.iterator();
		String channelName = "";

		Channel channelItem = null;
		while (it.hasNext()) {
			channelName = (String) it.next();
			if (channelName != null && !channelName.equals("")) {
				channelItem = (Channel) ItemManager.getInstance().getItemByName(channelName,
						Channel.class);
				if (channelItem != null && channelItem.getId() > 0) {
					channels.add(channelItem);
				}
			}
		}
		return channels;
	}

	public static void refreshLVBCache(Object key) {
		LVBCache.remove(key);
	}

	public static String toHref(String idStr) throws Exception {
		StringBuffer retHref = new StringBuffer();
		News item = null;
		if (idStr != null && !"".equals(idStr)) {
			StringTokenizer st = new StringTokenizer(idStr, ";");
			while (st.hasMoreElements()) {
				try {
					item = (News) ItemManager.getInstance().get(new Integer(st.nextToken().trim()),
							ItemInfo.getItemClass(ItemInfo.NEWS_TYPE));
					if (item != null)
						retHref.append("<li class=relationNews><A href=")
								.append(item.getUrl())
								.append(" ::" + item.getId())
								.append("|| target=_blank>")
								.append(item.getDesc())
								.append("</A></li>");
				} catch (Exception e) {
					continue;
				}
			}
		}
		return retHref.toString();
	}

	static public Object deepCopy(Object oldObj) throws Exception {
		ObjectOutputStream oos = null;
		ObjectInputStream ois = null;
		try {
			ByteArrayOutputStream bos = new ByteArrayOutputStream();
			oos = new ObjectOutputStream(bos);
			// serialize and pass the object
			oos.writeObject(oldObj);
			oos.flush();
			ByteArrayInputStream bin = new ByteArrayInputStream(bos.toByteArray()); // E
			ois = new ObjectInputStream(bin); 
			// return the new object
			return ois.readObject();
		} catch (Exception e) {
			log.error("deepCopy error " + e);
			throw (e);
		} finally {
			oos.close();
			ois.close();
		}
	}

	/**
	 *	added by wangzhigang 2005.03.23
	 *	get homepage entityitem
	 */
	public static EntityItem getHpEntity( int entityId )
	{
		try
		{
			EntityItem ret = (EntityItem)ItemManager.getInstance().get( new Integer(entityId), EntityItem.class );
			if( ret==null ) return null;

			while( true )
			{
				if( ret==null || ret.getPid()==0 )
				{
					// 此实体无父对象,非正常退出,返回null
					log.warn("getHpEntity -- NULL ENTITY @entity "+entityId);
					ret = null;
					break;
				}

				// 找到首页实体,正常退出
				if( ret.getType()==5 || ret.getPid()==-1 ) break;
				ret = (EntityItem)ItemManager.getInstance().get( new Integer(ret.getPid()), EntityItem.class );
			}
			return ret;
		} catch(Exception e) {
			log.error("getHpEntity exception -- ", e);
			return null;
		}
	}
	public static EntityItem getHpEntity( EntityItem entity )
	{
		try
		{
			EntityItem ret = entity;
			if( ret==null ) return null;

			while( true )
			{
				if( ret==null || ret.getPid()==0 )
				{
					// 此实体无父对象,非正常退出,返回null
					log.warn("getHpEntity -- NULL ENTITY @entity "+entity.getId());
					ret = null;
					break;
				}

				// 找到首页实体,正常退出
				if( ret.getType()==5 || ret.getPid()==-1 ) break;

				ret = (EntityItem)ItemManager.getInstance().get( new Integer(ret.getPid()), EntityItem.class );
			}
			return ret;
		} catch(Exception e) {
			log.error("getHpEntity exception -- ", e);
			return null;
		}
	}

	private static class DescComparator implements Comparator
	{
		public int compare( Object o1, Object o2 )
		{
			if( o1==null || o2==null ) return 0;
			if( !(o1 instanceof Item) || !(o2 instanceof Item) ) return 0;

			Item obj1 = (Item)o1;
			Item obj2 = (Item)o2;

			return String.valueOf(obj1.getDesc()).compareTo( String.valueOf(obj2.getDesc()) );
		}
	}

	/**
	 *	判断短名字(发布名称)是否重复
	 */
	public static List getShortnames( String shortName, Integer channel ) {
		String hql = "select item.id from " + ItemInfo.getEntityClass().getName()
				+ " item where item.channel=? and item.shortname=?";
		List ret = null;
		try {
			Collection values = new ArrayList();
			values.add( channel );
			values.add( shortName );
			ret = ItemManager.getInstance().getList(hql, values, -1, -1);
		} catch (Exception e) {
			log.error("ItemUtil.getEntityChildren error. " + e.toString());
		}
		return ret;
	}
	
	/**
	 * 
	 */
	private static final String LIST_ENTITY_TYPE_PREFIX = "cmsET:";
	
	/**
	 * 列表的子实体是新闻
	 */
	private static final String LIST_NEWS_TYPE_PREFIX = LIST_ENTITY_TYPE_PREFIX+"news";
	
	/**
	 * 列表的子实体是图片
	 */
	private static final String LIST_PICTURE_TYPE_PREFIX = LIST_ENTITY_TYPE_PREFIX+"picture";
	
	/**
	 * 根据动态碎片的描述解析出列表的子实体的类型,如果desc以@link{LIST_PICTURE_TYPE_PREFIX}开头,那么
	 * 返回的列表类型是IntemInfo.PICTURE_TYPE;没有匹配返回IntemInfo.NEWS_TYPE
	 *  
	 * @param desc 动态碎片的描述
	 * @return
	 */
	public static int getListEntityTypeByDesc(String desc){
		int type = ItemInfo.NEWS_TYPE;
		if(desc != null){
			if(desc.startsWith(LIST_PICTURE_TYPE_PREFIX)){
				type = ItemInfo.PICTURE_TYPE;
			}
		}
		return type;
	}
	
	/**
	 *相关新闻的排重处理
	 *
	 *@param relaStr 相关新闻ID串
	 *@return 返回是排重后的ID串
	 */
	public static String relaContent(String relaStr, int count){
	
		String[] relativeNews = relaStr.split(Global.CMSSEP);
		int curi = 0;//当前塞到relaArray的位置
		String returnString = "";
		
		if( relativeNews != null && relativeNews.length >0 ){
			//count = count>=relativeNews.length?relativeNews.length:count;
			String[][] relaArray = new String[relativeNews.length][2];
			for(int i=0; relativeNews!=null && i<relativeNews.length; i++){
				int i_id = -1;
				try{
					i_id = Integer.parseInt( relativeNews[i].trim() );

					EntityItem eItem = (EntityItem)ItemManager.getInstance().get(new Integer(i_id), EntityItem.class);

					if( eItem != null && curi < relaArray.length ){
						relaArray[curi][0] = eItem.getId()+"";
						relaArray[curi][1] = eItem.getDesc();
						curi ++ ;
					}

				} catch(Exception e) {
					continue;
				}
			}

			String[][] tmpArray = new String[curi][2];
			for( int i=0;i<curi;i++ ){
				tmpArray[i][0] = relaArray[i][0];
				tmpArray[i][1] = relaArray[i][1];
			}
			
			String restr =  exclude(tmpArray);//去排重
			
			//只返回需要的条数count
			String[] restrArray = restr.split(Global.CMSSEP);
			count = count>=restrArray.length?restrArray.length:count;
			for( int j=0;j<count;j++ ){
				returnString += restrArray[j] + ";";
			}
		}
		
		return returnString;
	}
	 
	/*
	 *排重处理
	 *@param valArray
	 *@return 排重之后的以分号为分割的id串
	*/
	private static String exclude( String[][] valArray ){
    
    		String retstr = "";
    		
		for( int i=0;i<valArray.length;i++ ){
			String iv = valArray[i][1];
			for( int j=i+1;j<valArray.length;j++ ){
				String jv = valArray[j][1];
				if( iv.equals(jv) ){
					valArray[j][1] = "-1";
				}
			}
		}
		int count = 0;
		for( int i=0;i<valArray.length;i++ ){
			if( !valArray[i][1].equals("-1") ){
				count ++;
			}
		}

		for( int i=0;i<valArray.length;i++ ){
			if( !valArray[i][1].equals("-1") ){
				retstr += valArray[i][0] +";";
			}
		}
		
		return retstr;
    }
}
